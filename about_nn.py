import streamlit as st

def show():
    st.title("üìñ ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network (Ramen)")

    # üìå ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset
    st.header("üìå ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset")
    st.write("""
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå **www.kaggle.com**  
    - Dataset: [Ramen Ratings]  
    - Dataset ‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (`Stars`)
    """)

    # üìå ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Feature ‡∏Ç‡∏≠‡∏á Dataset
    st.header("üîπ Feature ‡∏Ç‡∏≠‡∏á Dataset")
    st.write("""
    - **Review #**: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    - **Brand**: ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡πÄ‡∏°‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "Nissin", "Maruchan"
    - **Variety**: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡πÄ‡∏°‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "Chicken Flavor", "Tonkotsu"
    - **Style**: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡πÄ‡∏°‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "Cup", "Pack", "Bowl"
    - **Country**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏≤‡πÄ‡∏°‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "Japan", "USA"
    - **Stars**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏≤‡πÄ‡∏°‡∏ô (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•)
    """)

    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.header("üîπ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("""
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏î‡∏¢:
    - ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ `Stars`
    - ‡πÅ‡∏õ‡∏•‡∏á `Stars` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    - ‡πÉ‡∏ä‡πâ **Label Encoding** ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (`Brand`, `Variety`, `Style`, `Country`) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    - ‡πÉ‡∏ä‡πâ **StandardScaler** ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    """)

    # ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Neural Network ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    st.header("üîπ ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Neural Network ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
    st.write("""
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á **Fully Connected Neural Network (Dense Layers)** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡πÄ‡∏°‡∏ô (`Stars`)  
    - ‡πÉ‡∏ä‡πâ **4 Features** ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà `Brand`, `Variety`, `Style`, `Country`
    - ‡πÉ‡∏ä‡πâ **3 Hidden Layers** ‡∏û‡∏£‡πâ‡∏≠‡∏° `ReLU Activation`
    - ‡∏°‡∏µ **Dropout Layers** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Overfitting
    - ‡πÉ‡∏ä‡πâ **Huber Loss** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á Outlier
    """)

    # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    st.subheader("üîπ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.code("""
    model = Sequential([
        Dense(256, activation='relu', input_shape=(4,)),  
        Dropout(0.3),
        Dense(128, activation='relu'),
        Dropout(0.2),
        Dense(64, activation='relu'),
        Dense(1)  # Output Layer
    ])
    """, language="python")

    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    st.header("üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write("""
    1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `ramen.csv` ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    2. ‡πÉ‡∏ä‡πâ **Label Encoding** ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    3. ‡πÉ‡∏ä‡πâ **StandardScaler** ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏î‡πâ‡∏ß‡∏¢ **Keras Sequential API**
    5. ‡πÉ‡∏ä‡πâ **Adam Optimizer** ‡πÅ‡∏•‡∏∞ **Huber Loss**
    6. ‡πÉ‡∏ä‡πâ **Early Stopping** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Overfitting
    7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå `ramen_model.keras`
    """)

    # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•
    st.subheader("üîπ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.code("""
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005), 
                  loss=tf.keras.losses.Huber(), 
                  metrics=['mae'])

    early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

    model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, 
              validation_data=(X_test_scaled, y_test), callbacks=[early_stop])
    """, language="python")

    st.success("‚ú® ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Web Application ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!")
